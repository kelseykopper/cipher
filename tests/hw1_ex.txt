psuedocode algorithm to find n^2:

k = 0
s = 0

while k < n
	s += (2k + 1)
	k += 1


1a) loop invariant -> s = k^2

1b) proof that this holds at initialization: 
	k = 0
	s = 0
	then s = k^2 = (0)^2 = 0, which is true 

1c) proof that this holds during maintenance: 
	s = k^2 at the start of the while loop 
	
	s is set to s + (2k + 1)
	substituting s = k^2 into this, 
		s = s + (2k + 1) = k^2 + (2k + 1) = (k + 1)(k + 1) = (k + 1)^2 = s
	
	then k = k + 1, so we now have (k + 1)^2 = (k)^2 = s.

	thus s = k^2 during maintenace

1d) proof that this holds at termination:
	loop ends when k == n. 
	plugging into our invariant, s = k^2 = n^2
	thus, s = k^2 implies s = n^2 and the loop invariant has been proved
	 at termination.
	
QED

2) This algorithm's worst-case runtime is:
	T(l,r) = LENGTH(l) + LENGTH(r)

3a) Output of MAKE-SETS(4,2):
{1, 2}
{1, 3}
{1, 4}
{2, 3}
{2, 4}
{3, 4}

3b) MAKE-SETS(a,b) generates all subsets of size b from the set {1, ..., a}
